input {
  lumberjack {
    port => 5000
    type => "logs"
    ssl_certificate => "/etc/pki/tls/certs/logstash-forwarder.crt"
    ssl_key => "/etc/pki/tls/private/logstash-forwarder.key"
  }
}

filter {
  
	if [type] == "syslog" {
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:pam_message} %{USER:pam_username} from %{HOST:pam_host}" }
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "Invalid user %{USER:username} from %{IP:src_ip}" }
			add_tag => [ "ssh_invalid_user" ]
			 remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Accepted keyboard-interactive/pam for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_plus_google_auth_success" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Failed password for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_failed_password" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: Accepted %{WORD:auth_method} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_auth_success" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): access denied for user `%{USER:pam_username}' from `%{HOST:pam_host}'" }
			add_tag => [ "ssh_google_auth_failed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}\(%{DATA:pam_message}\)(?:\[%{POSINT:syslog_pid}\])?: Did not receive verification code from user" }
			add_tag => [ "ssh_google_auth_failed", "ssh_google_auth_no_verification_code" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}\(%{DATA:pam_message}\)(?:\[%{POSINT:syslog_pid}\])?: Secret file %{QUOTEDSTRING:google_auth_secret_file_path} changed while trying to use scratch code" }
			add_tag => [ "ssh_google_auth_failed", "ssh_google_auth_scratch_code_error" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "Accepted %{DATA:pam_message} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_auth_success" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{GREEDYDATA:ssh_session_closed_message} by %{IP:src_ip}" }
			add_tag => [ "ssh_logout" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): authentication failure; logname=%{DATA:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{HOST:pam_host} {1,2}user=%{USER:pam_username}" }
			add_tag => [ "ssh_auth_failed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: error: PAM: Authentication failure for %{USER:pam_username} from %{HOST:pam_host}" }
			add_tag => [ "ssh_auth_failed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: new group: name=%{USER:pam_username}, GID=%{INT:pam_GID}" }
			add_tag => [ "linux_system", "new_group" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: new user: name=%{USER:pam_username}, UID=%{INT:pam_UID}, GID=%{INT:pam_GID}, home=%{DATA:pam_home_path}, shell=%{DATA:pam_shell}" }
			add_tag => [ "linux_system", "new_user"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}

		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): password changed for %{USER:pam_username}" }
			add_tag => [ "linux_system", "password_changed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: delete user '%{USER:pam_username}'" }
			add_tag => [ "linux_system", "delete_user" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{WORD:sudo_word}: %{WORD:pam_type}\(%{DATA:pam_message}\): %{GREEDYDATA:sudo_message}; logname=%{DATA:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{HOST:pam_host} {1,2}user=%{USER:pam_username}" }
			add_tag => [ "linux_system", "sudo_attempt"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: removed group '%{DATA:pam_group}' owned by '%{USER:pam_username}'" }
			add_tag => [ "linux_system", "removed_group" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): session opened for user %{USER:pam_username} by \(uid=%{INT:pam_UID}\)" }
			add_tag => [ "ssh_session_opened" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Accepted publickey for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_accepted_publickey" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{WORD:pam_type}\(%{DATA:pam_message}\): session closed for user %{USER:pam_username}" }
			add_tag => [ "ssh_logout"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Received disconnect from %{IP:src_ip}: %{INT:pam_random}: disconnected by user" }
			add_tag => [ "ssh_disconnect"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}: %{USER:priv_username}{1,2} : %{GREEDYDATA:priv_message}" }
			add_tag => [ "linux_system", "privilege_attempt" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{GREEDYDATA:logshipper_source} %{WORD:logshipper_type1}: %{WORD:logshipper_shib1}-%{WORD:logshipper_shib2} %{INT:logshipper_timestamp} %{WORD:logshipper_shib_username} %{IP:src_ip}" }
			add_tag => [ "logshipper" ]
		}
		
		dns { resolve => ["host"] action => "replace" }
		mutate { add_tag => ["dns_resolve"] }
		
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
		geoip {
			source => "host"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}
  
	if [type] == "apache-access" {
		mutate { replace => { "type" => "apache-access" } }
		grok {
			match => { "message" => "%{COMBINEDAPACHELOG}" }
		}
		grok {
			match => { "message" => "%{IP:src_ip} - %{USER:basic_auth_user} (?:\[%{HTTPDATE}\])? %{QUOTEDSTRING:basic_auth_message} %{NUMBER:basic_auth_response} (?:%{NUMBER:basic_auth_bytes}|-)" }
		}
    	if [basic_auth_response] == "401" and "-" not in [basic_auth_user] {
			mutate {
				add_tag => [ "basic_auth_failure" ]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		if [basic_auth_response] == "404" and "-" not in [basic_auth_user] {
			mutate {
				add_tag => [ "basic_auth_failure" ]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		if [basic_auth_response] == "200" and "-" not in [basic_auth_user] {
			mutate {
				add_tag => [ "basic_auth_success" ]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}

	if [type] == "apache-error" {
		grok {
			match => { "message" => "%{COMBINEDAPACHELOG}" } 
		}
		grok {
		  match => { "message" => "\[%{DATA:timestamp}\] \[%{LOGLEVEL:loglevel}\] (?:\[client %{IP:src_ip}\]) user %{USER:basic_auth_user} not found" }
		  add_tag => [ "basic_auth_user_not_found"]
		  remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "\[%{DATA:timestamp}\] \[%{LOGLEVEL:loglevel}\] (?:\[client %{IP:src_ip}\]) user %{USER:basic_auth_user}: authentication failure %{GREEDYDATA:apache_errmsg}" }
		  add_tag => [ "basic_auth_password_mismatch"]
		  remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		geoip {
		  source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}

	if [type] == "apache-ssl-access" {
		grok {
			match => { "message" => "%{IP:src_ip} - %{USER:basic_auth_user} (?:\[%{HTTPDATE}\])? %{QUOTEDSTRING:basic_auth_message} %{NUMBER:basic_auth_response} (?:%{NUMBER:basic_auth_bytes}|-)" }
			add_tag => [ "basic_auth_attempt"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		if [basic_auth_response] == "401" and "-" not in [basic_auth_user] {
			grok {
				match => { "message" => "%{IP:src_ip} - %{USER:basic_auth_user} (?:\[%{HTTPDATE}\])? %{QUOTEDSTRING:basic_auth_message} %{NUMBER:basic_auth_response} (?:%{NUMBER:basic_auth_bytes}|-)" }
				add_tag => [ "basic_auth_failure"]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		if [basic_auth_response] == "404" and "-" not in [basic_auth_user] {
			grok {
				match => { "message" => "%{IP:src_ip} - %{USER:basic_auth_user} (?:\[%{HTTPDATE}\])? %{QUOTEDSTRING:basic_auth_message} %{NUMBER:basic_auth_response} (?:%{NUMBER:basic_auth_bytes}|-)" }
				add_tag => [ "basic_auth_failure"]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		if [basic_auth_response] == "200" and "-" not in [basic_auth_user] {
			mutate {
				add_tag => [ "basic_auth_success" ]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		
		geoip {
		  source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}

	if [type] == "shibboleth" {
		grok {
			match => [ "message", "%{TIMESTAMP_ISO8601:shib_event_timestamp} %{WORD:shib_notification_type} %{DATA:shib_trans_type}:\ New session \(ID: %{DATA:shib_session_id}\) with \(applicationId: %{DATA:shib_application_id}\) for principal from \(IdP: %{DATA:shib_IdP}\) at \(ClientAddress: %{IP:src_ip}\) with \(NameIdentifier: %{DATA:shib_name_identifier}\) using \(Protocol: %{DATA:shib_protocol}\) from \(AssertionID: %{DATA:shib_assertion_id}\)" ]

		}
		date {
			match => [ "time", "YYYY-MM-dd HH:mm:ss"]
		}
		geoip {
		  source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}

	if [type] == "shibboleth-warn" {
		grok {
			match => [ "message", "%{TIMESTAMP_ISO8601:shib_warn_event_timestamp} %{WORD:shib_warn_notification_type} %{GREEDYDATA:shib_warn_message}" ]
		}
		date {
			match => [ "time", "YYYY-MM-dd HH:mm:ss"]
		}
	}

	if [type] == "shib_logshipper" {
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{GREEDYDATA:logshipper_source} %{WORD:logshipper_type1}: :-%{WORD:logshipper_shib2} %{INT:logshipper_timestamp} %{WORD:logshipper_shib_username} %{IP:src_ip}" }
		}
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}
	
	if [type] == "deny-hosts" {
		grok {
			match => [ "message", "%{DATA:discard}\ %{SYSLOGTIMESTAMP:timestamp} %{YEAR} %{DATA:discard} %{IP:src_ip}" ]
			add_tag => "deny_hosts"
			remove_field => [ "%{discard}" ]
		}
		date {
			match => [ "time", "MM dd HH:mm:ss YYYY"]
		}
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}
	
	if [type] == "yum" {
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:yum_event}\: %{GREEDYDATA:yum_package}" }
			add_tag => [ "yum_events" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
	}
	
	if "_grokparsefailure" in [tags] {
		mutate {
	      remove_tag => "_grokparsefailure"
	  }
	}
	if "_jsonparsefailure" in [tags] {
		mutate {
	      remove_tag => "_jsonparsefailure"
	  }
	}
	if "_jsonparsefailure_grokparsefailure" in [tags] {
		mutate {
	      remove_tag => "_jsonparsefailure_grokparsefailure"
	  }
	}
	
}



output {
	elasticsearch {
		host => localhost
	}
	stdout { codec => rubydebug }
}
