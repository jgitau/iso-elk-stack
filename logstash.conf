input {
	##################################################################
	#Port 5043: Filebeat (with TLS)
	##################################################################
	beats {
		port => 5043
		ssl=> "true"
		ssl_certificate=>"/etc/pki/tls/certs/logstash-beats.crt"
		ssl_key=>"/etc/pki/tls/private/logstash-beats.key"
	}
	##################################################################
	#Port 5044: Packetbeat (with TLS)
	##################################################################
	beats {
		port => 5044
		ssl=> "true"
		ssl_certificate=>"/etc/pki/tls/certs/logstash-beats.crt"
		ssl_key=>"/etc/pki/tls/private/logstash-beats.key"
	}
	##################################################################
	#Port 5045: Topbeat (with TLS)
	##################################################################
	beats {
		port => 5045
		ssl=> "true"
		ssl_certificate=>"/etc/pki/tls/certs/logstash-beats.crt"
		ssl_key=>"/etc/pki/tls/private/logstash-beats.key"
	}
	##################################################################
	#Port 5046: NXLog (Windows)
	##################################################################
	tcp {
		codec => json_lines { charset => CP1252 }
		port => "3515"
		tags => [ "tcp_json_windows" ]
	}
	##################################################################
	#Optional;
	#Port 9000: OSSEC to Logstash from ELK Host Server (this machine)
	##################################################################
	#udp {
    #	 port => 9000
	# 	 type => "syslog"
	#}
	##################################################################
	#Optional:
	#Ping
	##################################################################
    #exec {
    #    command => "fping -C1 ip_to_ping_here"
    #    interval => 30
    #    type => "fping"
    #    tags => [ "fping" ]
    #    add_field => { "ping_target" => "hostname_of_ip_to_ping_here" }
    #}
} #END input

filter {
	if [fields][log_type] == "syslog" {
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:pam_message} %{USER:pam_username} from %{SYSLOGHOST:syslog_hostname}" }
		}
		grok {
			match => { "message" => "Invalid user %{USER:username} from %{IP:src_ip}" }
			add_tag => [ "ssh_invalid_user" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Accepted keyboard-interactive/pam for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_plus_google_auth_success" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Failed password for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_failed_password" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: Accepted %{WORD:auth_method} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_auth_success" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): access denied for user `%{USER:pam_username}' from `%{SYSLOGHOST:syslog_hostname}'" }
			add_tag => [ "ssh_google_auth_failed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}\(%{DATA:pam_message}\)(?:\[%{POSINT:syslog_pid}\])?: Did not receive verification code from user" }
			add_tag => [ "ssh_google_auth_failed", "ssh_google_auth_no_verification_code" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}\(%{DATA:pam_message}\)(?:\[%{POSINT:syslog_pid}\])?: Secret file %{QUOTEDSTRING:google_auth_secret_file_path} changed while trying to use scratch code" }
			add_tag => [ "ssh_google_auth_failed", "ssh_google_auth_scratch_code_error" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "Accepted %{DATA:pam_message} for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_auth_success" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{GREEDYDATA:ssh_session_closed_message} by %{IP:src_ip}" }
			add_tag => [ "ssh_logout" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): authentication failure; logname=%{DATA:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{SYSLOGHOST:syslog_hostname} {1,2}user=%{USER:pam_username}" }
			add_tag => [ "ssh_auth_failed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: error: PAM: Authentication failure for %{USER:pam_username} from %{SYSLOGHOST:syslog_hostname}" }
			add_tag => [ "ssh_auth_failed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}		
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): session opened for user %{USER:pam_username} by \(uid=%{INT:pam_UID}\)" }
			add_tag => [ "ssh_session_opened" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Accepted publickey for %{USER:username} from %{IP:src_ip} port %{INT:src_port} ssh2" }
			add_tag => [ "ssh_accepted_publickey" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{WORD:pam_type}\(%{DATA:pam_message}\): session closed for user %{USER:pam_username}" }
			add_tag => [ "ssh_logout"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: Received disconnect from %{IP:src_ip}: %{INT:pam_random}: disconnected by user" }
			add_tag => [ "ssh_disconnect" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: new group: name=%{USER:pam_username}, GID=%{INT:pam_GID}" }
			add_tag => [ "linux_new_group" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: new user: name=%{USER:pam_username}, UID=%{INT:pam_UID}, GID=%{INT:pam_GID}, home=%{DATA:pam_home_path}, shell=%{DATA:pam_shell}" }
			add_tag => [ "linux_new_user"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: %{WORD:pam_type}\(%{DATA:pam_message}\): password changed for %{USER:pam_username}" }
			add_tag => [ "linux_password_changed" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: delete user '%{USER:pam_username}'" }
			add_tag => [ "linux_delete_user" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{WORD:sudo_word}: %{WORD:pam_type}\(%{DATA:pam_message}\): %{GREEDYDATA:sudo_message}; logname=%{DATA:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{DATA:tty} ruser=%{DATA:ruser} rhost=%{SYSLOGHOST:syslog_hostname} {1,2}user=%{USER:pam_username}" }
			add_tag => [ "linux_sudo_attempt"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:host_single} %{SYSLOGPROG}: removed group '%{DATA:pam_group}' owned by '%{USER:pam_username}'" }
			add_tag => [ "linux_removed_group" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}: %{USER:priv_username}{1,2} : %{GREEDYDATA:priv_message}" }
			add_tag => [ "linux_privilege_attempt" ]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		
		#temporarily removed on 11.5.15 because errors about nil host in logstash.err
		#dns { resolve => ["host"] action => "replace" }
		#mutate { add_tag => ["dns_resolve"] }
		
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
		geoip {
			source => "host"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}
  
	if [fields][log_type] == "apache-access" {
		grok {
			match => { "message" => "%{COMBINEDAPACHELOG}" }
		}
		grok {
			match => { "message" => "%{IP:src_ip} - %{USER:basic_auth_user} (?:\[%{HTTPDATE}\])? %{QUOTEDSTRING:basic_auth_message} %{NUMBER:basic_auth_response} (?:%{NUMBER:basic_auth_bytes}|-)" }
		}
    	if [basic_auth_response] == "401" and "-" not in [basic_auth_user] {
			mutate {
				add_tag => [ "basic_auth_failure" ]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		if [basic_auth_response] == "404" and "-" not in [basic_auth_user] {
			mutate {
				add_tag => [ "basic_auth_failure" ]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		if [basic_auth_response] == "200" and "-" not in [basic_auth_user] {
			mutate {
				add_tag => [ "basic_auth_success" ]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}

	if [fields][log_type] == "apache-error" {
		grok {
			match => { "message" => "\[(?<timestamp>%{DAY:day} %{MONTH:month} %{MONTHDAY} %{TIME} %{YEAR})\] \[.*:%{LOGLEVEL:loglevel}\] \[pid %{NUMBER:pid}\] %{GREEDYDATA:errormsg} \[client %{IP:src_ip}:%{DATA:src_port}\] %{GREEDYDATA:errormsg}" } 
		}
		grok {
		  match => { "message" => "\[%{DATA:timestamp}\] \[%{LOGLEVEL:loglevel}\] (?:\[client %{IP:src_ip}\]) user %{USER:basic_auth_user} not found" }
		  add_tag => [ "basic_auth_user_not_found"]
		  remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		grok {
		  match => { "message" => "\[%{DATA:timestamp}\] \[%{LOGLEVEL:loglevel}\] (?:\[client %{IP:src_ip}\]) user %{USER:basic_auth_user}: authentication failure %{GREEDYDATA:apache_errmsg}" }
		  add_tag => [ "basic_auth_password_mismatch"]
		  remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		geoip {
		  source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}

	if [fields][log_type] == "apache-ssl-access" {
		grok {
			match => { "message" => "%{IP:src_ip} - %{USER:basic_auth_user} (?:\[%{HTTPDATE}\])? %{QUOTEDSTRING:basic_auth_message} %{NUMBER:basic_auth_response} (?:%{NUMBER:basic_auth_bytes}|-)" }
			add_tag => [ "basic_auth_attempt"]
		}
		if [basic_auth_response] == "401" and "-" not in [basic_auth_user] {
			grok {
				match => { "message" => "%{IP:src_ip} - %{USER:basic_auth_user} (?:\[%{HTTPDATE}\])? %{QUOTEDSTRING:basic_auth_message} %{NUMBER:basic_auth_response} (?:%{NUMBER:basic_auth_bytes}|-)" }
				add_tag => [ "basic_auth_failure"]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		if [basic_auth_response] == "404" and "-" not in [basic_auth_user] {
			grok {
				match => { "message" => "%{IP:src_ip} - %{USER:basic_auth_user} (?:\[%{HTTPDATE}\])? %{QUOTEDSTRING:basic_auth_message} %{NUMBER:basic_auth_response} (?:%{NUMBER:basic_auth_bytes}|-)" }
				add_tag => [ "basic_auth_failure"]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		if [basic_auth_response] == "200" and "-" not in [basic_auth_user] {
			mutate {
				add_tag => [ "basic_auth_success" ]
				remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
			}
		}
		
		geoip {
		  source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}

	if [fields][log_type] == "shibboleth" {
		grok {
			match => [ "message", "%{SYSLOGTIMESTAMP:shib_event_timestamp} %{WORD:shib_notification_type} %{DATA:shib_trans_type}:\ New session \(ID: %{DATA:shib_session_id}\) with \(applicationId: %{DATA:shib_application_id}\) for principal from \(IdP: %{DATA:shib_IdP}\) at \(ClientAddress: %{IP:src_ip}\) with \(NameIdentifier: %{DATA:shib_name_identifier}\) using \(Protocol: %{DATA:shib_protocol}\) from \(AssertionID: %{DATA:shib_assertion_id}\)" ]
		}
		date {
			match => [ "time", "YYYY-MM-dd HH:mm:ss"]
		}
		geoip {
		  	source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}

	if [fields][log_type] == "shibboleth-warn" {
		grok {
			match => [ "message", "%{SYSLOGTIMESTAMP:shib_warn_event_timestamp} %{WORD:shib_warn_notification_type} %{GREEDYDATA:shib_warn_message}" ]
		}
		date {
			match => [ "time", "YYYY-MM-dd HH:mm:ss"]
		}
	}

	if [fields][log_type] == "shib_logshipper" {
		grok {
		  	match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{GREEDYDATA:logshipper_source} %{WORD:logshipper_type1}: %{GREEDYDATA:logshipper_type2} %{INT:logshipper_timestamp} %{WORD:logshipper_shib_username} %{IP:src_ip}" }
			add_tag => [ "shib_logshipper"]
			remove_tag => [ "_jsonparsefailure", "_grokparsefailure", "_jsonparsefailure_grokparsefailure" ]
		}
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}
	
	if [fields][log_type] == "deny-hosts" {
		grok {
			match => [ "message", "%{DATA:discard}\ %{SYSLOGTIMESTAMP:timestamp} %{YEAR} %{DATA:discard} %{IP:src_ip}" ]
			add_tag => "deny_hosts"
			remove_field => [ "%{discard}" ]
		}
		grok {
			match => [ "message", "%{TIMESTAMP_ISO8601:syslog_timestamp} - %{GREEDYDATA:denyhosts_status} \[%{DATA:denyhosts_denied_host}\]" ]
			add_tag => "deny_hosts"
		}
		date {
			match => [ "time", "MM dd HH:mm:ss YYYY"]
		}
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}
	
	if [fields][log_type] == "yum" {
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{DATA:yum_event}\: %{GREEDYDATA:yum_package}" }
			add_tag => [ "yum_events" ]
		}
	}
	
	if [fields][log_type] == "audit" {
		grok {
			match => { "message" => "type=%{WORD:audit_type} msg=audit\(%{NUMBER:audit_epoch}:%{NUMBER:audit_counter}\): user pid=%{NUMBER:audit_pid} uid=%{NUMBER:audit_uid} auid=%{NUMBER:audit_audid} ses=%{NUMBER:audit_ses} msg='op=%{DATA:audit_op} acct=%{QUOTEDSTRING:pam_username} exe=%{QUOTEDSTRING:audit_exe} hostname=%{DATA:src_ip} addr=%{DATA:src_ip} terminal=%{DATA:audit_terminal} res=%{DATA:audit_result}'" }
			add_tag => [ "audit_log" ]
		}
		geoip {
			source => "src_ip"
			target => "geoip"
			add_field => ["[geoip][coordinates]","%{[geoip][longitude]}"]
			add_field => ["[geoip][coordinates]","%{[geoip][latitude]}"]
		}
		mutate {
			convert => [ "[geoip][coordinates]", "float" ]
		}
	}
	
	if [fields][log_type] == "audit-commands" {
		grok {
			match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{WORD:host_single} %{USER:pam_username}: %{USER:pam_username} (?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:audit_command} (?:\[%{POSINT:audit_command_response}\])?" }
			add_tag => [ "audit_log_commands" ]
		}
	}
	
	#####################################################
	#fping
	#####################################################
	
	if "fping" in [tags] {
		grok {
			match => { "message" => "%{IP:ping_target_ip} : %{DATA:ping_int}, %{INT:ping_bytes} bytes, %{DATA:ping_ms} ms \(%{DATA:ping_avg} avg, %{INT:ping_loss}% loss\)" }
		}
	} #if
		
	if "fping" in [tags] and [ping_loss] == "0" {
		mutate { add_tag => "ping_loss_no" }
	}
	if "fping" in [tags] and [ping_loss] != "0" {
		mutate { add_tag => "ping_loss_yes" }
	}

	 ########################################
	 #if you wanted to throttle events so
	 #you only receive an event after 2
	 #occurrences and you get no more than
	 #3 in 10 minutes
	 ########################################
	 
	 if "ping_loss_yes" in [tags] {
	      throttle{
			period => 600
			before_count => 4
			after_count => 5
			key => "%{message}"
			add_tag => "AlertOnTag_ping_loss_yes"
		}

	}
		
	#####################################################
	#port 9000: OSSEC
	#####################################################
	
	if [type] == "syslog" {
	    grok {
	      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}: Alert Level: %{NONNEGINT:Alert_Level}; Rule: %{NONNEGINT:Rule} - %{DATA:Description}; Location: %{DATA:Location}; (user: %{USER:User};%{SPACE})?(srcip: %{IP:Src_IP};%{SPACE})?(user: %{USER:User};%{SPACE})?(dstip: %{IP:Dst_IP};%{SPACE})?(src_port: %{NONNEGINT:Src_Port};%{SPACE})?(dst_port: %{NONNEGINT:Dst_Port};%{SPACE})?%{GREEDYDATA:Details}" }
	      add_tag => [ "ossec"]
	      add_field => [ "ossec_server", "%{host}" ]
	    }
	    mutate {
	      remove_field => [ "message","syslog_timestamp", "syslog_program", "syslog_host", "syslog_message", "syslog_pid", "@version", "type", "host" ]
	    }
	}
	
	#####################################################
	#port 3515: NXLog
	#####################################################
	if "tcp_json_windows" in [tags] {
		date {
			locale => "en"
			timezone => "Etc/GMT"
			match => [ "EventTime", "YYYY-MM-dd HH:mm:ss" ]
		}
	}	
	
	#####################################################
	#For all: remove certain items from [tags]
	#####################################################
	if "_grokparsefailure" in [tags] {
		mutate {
	      remove_tag => "_grokparsefailure"
	  }
	}
	if "_jsonparsefailure" in [tags] {
		mutate {
	      remove_tag => "_jsonparsefailure"
	  }
	}
	if "_jsonparsefailure_grokparsefailure" in [tags] {
		mutate {
	      remove_tag => "_jsonparsefailure_grokparsefailure"
	  }
	}
	
	#####################################################
	#Netflow: convert cisco message to standard message
	#####################################################
	
	if "_grokparsefailure" not in [tags] {
      mutate {
        rename => ["cisco_message", "message"]
        remove_field => ["timestamp"]
      }
    }
	
	##################################################################
	#If no Beat (e.g. - OSSEC input), define index as logstash
	##################################################################
	if ! [@metadata][beat] {
	  mutate {
	    replace => [ '[@metadata][beat]', 'logstash' ]
	  }
	}
	
	##################################################################
	#Metrics
	#https://www.elastic.co/blog/logstash-configuration-tuning
	##################################################################
	metrics {
        meter => "documents"
        add_tag => "metric"
        flush_interval => 60
    }
	
}#END filter

output {
  
  ##################################################################
  #Output to Elasticearch
  ##################################################################
  elasticsearch {
    hosts => "localhost:9200"
    manage_template => false
    index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
  
  ##################################################################
  #Set standard out codec
  ##################################################################
  stdout { codec => rubydebug }
  
  ##################################################################
  #Logstash metrics
  ##################################################################

	
	if "metric" in [tags] {
	    stdout {
	        codec => line {
	            format => "1m rate: %{documents.rate_1m} ( %{documents.count} )"
	        }
	    }
	}
	
	if "AlertOnTag_ping_loss_yes" in [tags] {
		email {
			from => "logstash.alert@nowhere.com"
			subject => "UCLA-ISO-ELK Alert: Host Down"
			to => "your_email_here"
			via => "smtp"
			body => "Host: UCLA-ISO-ELK Alert: Host down: %{ping_target}. Original event log entry: %{message}"
			htmlbody => "<h3>UCLA-ISO-ELK Alert: Host down: %{ping_target}</h3><br/><p><strong>Original event log entry:</strong><br/>%{message}</p>"
		}
	}
	
	 	
} #END output